name: Build and Package Task UI App

on:
  push:
    branches:
      - "**"

jobs:
  build-and-deploy:
    #if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      actions: read

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: ${{ runner.os }}-node-

      - name: Determine version bump from all commits in PR merge
        id: determine_bump
        run: |
          COMMITS=$(git log ${{ github.event.before }}..${{ github.sha }} --pretty=format:"%s")
          echo "Analyzing commit messages:"
          echo "$COMMITS"

          bump="none"

          # Check for major (breaking changes)
          if echo "$COMMITS" | grep -qE "^(feat|fix|perf|refactor|chore|ci|docs|style|test)!:"; then
            bump="major"
          # Check for minor (new features)
          elif echo "$COMMITS" | grep -qE "^feat(\(.+\))?: "; then
            bump="minor"
          # Check for patch (fixes and other safe changes)
          elif echo "$COMMITS" | grep -qE "^(fix|perf|refactor|chore|ci|docs|style|test)(\(.+\))?: "; then
            bump="patch"
          else
            echo "No relevant commit prefix found; defaulting to 'patch'"
            bump="patch"
          fi

          echo "Determined bump level: $bump"
          echo "bump=$bump" >> $GITHUB_OUTPUT

      - name: Bump version in package.json
        id: bump_version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
          BUMP=${{ steps.determine_bump.outputs.bump }}

          if [ "$BUMP" = "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP" = "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [ "$BUMP" = "patch" ]; then
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "New version: $NEW_VERSION"
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Update package.json version
          npm version $NEW_VERSION --no-git-tag-version

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/task-app-ui
            ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=raw,value=${{ steps.bump_version.outputs.version }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Commit and Push Version Bump
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          git add package.json package-lock.json
          git commit -m "chore: bump version to ${{ steps.bump_version.outputs.version }}" || echo "No changes to commit"
          git push
